import math

// Test assignment
do {
    a,b,c,d = 1,2,3,4
    assert(a == 1)
    assert(b == 2)
    assert(c == 3)
    assert(d == 4)

    x = 1,2,3,4
    y = 1,2,3,4

    assert(-(1*-2-3+4*(2)**3) == -27)

    k = 2 *
        122
        + 20002 + 2 + 2.23 - 21212 - 2 / 2

    assert(k == 244)

    a,b = 3,2 
    a,b = b,a
    b,a = a,b
    assert( a == 3 and b == 2)
    assert( (a == 3) and (b == 2))
}

// Test arithmetric
do {
    x = 3
    x *= 8
    x /= 4
    x += 9
    x -= 7
    x **= 3
    assert(x == 512)

    assert( (1,2,10 | math.clamp)  == 2)

    list = 1,-2,5,3,4
    assert( (list | math.max) == 5)
    assert( (list | math.min) == -2)
    assert( (list | math.sum) == 11)
    assert( (list | math.mul) == -120)
}

// Test comparisions
do {
    assert( 1 < 3 < 7 )
    assert( 4 > 3 < 7 )
    assert( 4 >= 4 < 7 )
    assert( 4 == 4 < 7 )
    assert( 10 == 10 != 7 )

    assert((1,2) == (1,2))
    assert((1,2) != (1,2,3))
    assert((1,2) != (1,3))
    assert((1,2) != (1,5,3))
    assert(not ((1,2,4) == (1,2,3)))
    assert(not ((1,2) == (1,3)))

    
    assert( 1 == true)
    assert( 0 == false)

    assert( (not false ==  5 > 2  ) == false )
    assert( (not false == (5 > 2) ) == true  )
}

// Test for loop
do {

    for x1,y1 = 0,50; x1<3; x1++
    {
        assert(y1 == 50)
        assert(x1 == 0 or x1 == 1 or x1 == 2)
    }

}

// Test conditional expressions
do{

    a, b, c = 
        if false 
            if true 2,3,1
            else 3,4,3
        else 5,6,"hello"

    assert(a == 5)
    assert(b == 6)
    assert(c == "hello")

    k = if 123 > 8 == 8 > 2 >= 4*-1
            "Y"
        else "N"

    assert(k == "Y")
}

// Test function composition (pipes) and string interpolation
do {

    fun bee(a,b){ return a+2,2 }

    fun boo(b,a){ return b*2*a, 1 }
    fun mix(b,a){ return b*2*a+1 }
    fun buu(a){ return a }

    assert( (100,1 | bee | boo | math.sum) == 409 )
}

// Test string interpolation
do {

    text0 = "hello 
    ${4*12-23} there
    "
    assert( text0 == "hello 
    25 there
    ")
    
    text1 = "hello ${4*12-23} there"
    assert( text1 == "hello 25 there")

    text2 = "${ "${2-1} ${ "hello " + 2 }" } ${4*12-23} there ${1}${2}${1}${""}"
    assert( text2 == "1 hello 2 25 there 121")
}

// Test conditional statement
do {
    a = 2+3
    if( a < 10)
        a = 100
    assert(a == 100)
}

// Test functions and scope rules
do {

    kep = 10
    fun fran()
    {
        kep = 120
        kep = 100
    }
    fran()
    assert(kep == 10)

    serra = 1000
    fun camel()
    {
        return do {
            serra = 234
        }
        tunez = 213
        serra = 234
    }
    camel()
    assert(serra == 1000)

    pipa = 1000
    fun pepe()
    {
        pipa = 234
        return
        tunez = 213
    }
    pepe()
    assert(pipa == 1000)


    fun brand(a)
    {
        assert(a == 10)
        fun brands()
        {
            return a-231 + 1
        }
        return brands()
    }

    assert(brand(10) == -220)

    fun factorial(b)
    {
        if (b > 1) factorial(b - 1) * b else 1
    }

    assert(factorial(1) == 1)
    assert(factorial(3) == 6)
    assert(factorial(4) == 24)
    assert(factorial(-1) == 1)

    fun ham() {
        fun ham() {
            fun ham() {
                1
            } 
            1 + ham()
        }
        1 + ham()
    }

    assert(ham() == 3)
}

// Test anonymous pipe functions and implicit it,i1,it2,...
do {

    t,y = "ssd",2 | { a,b ->
            assert(a == "ssd")
            assert(b == 2)
            assert(arguments[0] == "ssd")
            assert(arguments[1] == 2)
            assert(arguments[2] == undefined)
            a,b,a+b 
        } | { a,b,c ->
            assert(c == "ssd2")
            assert(arguments[2] == "ssd2")
            a,b+c
        } | 
        { it,it }

    assert( t == "ssd" and y == "ssd")

    q, w = (if false 1 else 21), 43
    assert( q == 21 and w == 43)

    x = 3

    x | {
        assert(it == x)
        it+2,it
    } | { a,v ->
        assert(a == x+2)
        assert(v == x)
    }
}


// Test do expression
do {
    a = do {
       2+3-1
    }
    assert( a == 4 )

    r = do {
       return 2+3-1
    }
    assert( r == 4 )
}

// Test list access
do {

    a = (((10,2),2),3,4)

    b0 = a[0]
    b1 = a[1]
    b2 = a[2]

    assert( a[-1] == 4)
    assert( a[3] == undefined)

    assert( b0[0][0] == 10)
    assert( b0[0][1] == 2)

    assert( a[1] == 3)

    q,w,e = a
    r,t = q
    y,u = r

    assert( y == 10)
    assert( u == 2)

    i = (3,)
    assert(i[0] == 3)
}

// Test dictionary
do {

    a = {
        a = 2,2,3
        d = {}
        b = 3
        2 ="d"
        3 = 2
        g = 3
        k = {
            4= 2,3, { 4= 2,3 }
            5= 2
        }
        r = 4
        callme = fun { a,b ->

        }
        itcall = fun {
            it+it2+it3
        }
        arguemntsCall = fun {
            return arguments
        }
    }
    
    assert(a.a[0] == 2 )
    assert(a.2 == "d" )
    assert(a.k.4[2].4[1] == 3 )
    assert(a.callme(1,2) == undefined )
    assert(a.itcall(1,23023,2,3) == 6 )
}

// Test object reassignation
do {
    fun multi(g){ 2*g }

    a = {
        b = fun { multi(it)*10 }
    }

    b = {
        a = a
    }

    assert(b.a.b(2.1) == 42)
}


// Test list and string operations
do {
    
    list = 1,2,3,4
    assert( list?size == 4)
    assert( (list*2)?size == 8 )
    assert( (list+list)?size == 8 )
    assert( (list,1)?size == 2 )
    assert( (list+1)?size == 5 )
    
    assert( list[0,2] == (1,2))
    assert( list[0] == 1)
    assert( list[-1] == 4)
    assert( list[-3,-1] == (2,3,4))
    
    string = "hello"
    assert( string?size == 5)
    assert( (string*3)?size == 15 )
    assert( (3*string)?size == 15 )
    assert( (string+string)?size == 10 )
    assert( (string,1)?size == 2 )
    assert( (string+1)?size == 6 )

    assert( string[0,2] == "he")
    assert( string[0] == "h")
    assert( string[-1] == "o")
    assert( string[-3,-1] == "llo")
}

// Test pipe map filter 
do {

    s = 0,2,3,4
    assert( (s | filter { it > 2 } )?size == 2 )
    assert( (s | map { it*2 } ) == (0,4,6,8) )
    assert( (s | filter { it > 2 } | map { it*2 } ) == (6,8) )
    assert( (s | map { it*2 } | filter { it > 2 } ) == (4,6,8) )
    assert( (s | map { it*2 } | math.sum ) == 18 )
}

// Test range operator
do {
    
    assert(0:0.4:1 == (0,0.4,0.8))
    assert(0:-0.4:1 == (0,0.4,0.8))
    assert(1:0.5:0 == (1,0.5,0))
    assert(1:-0.5:0 == (1,0.5,0))
    assert(1:0 == (1,0))
    assert(0:10 == (0,1,2,3,4,5,6,7,8,9,10))
}

// Test list built-in methods
do {

    list = (3,2),(4,1),(2,6)
    // assert(list?toString)
    assert(list?toDict.4 == 1)
    assert(list?size == 3)
    assert(list?reverse[0] == (2,6))
    assert(list?flat[0,3] == (3,2,4))
    assert(list?is == "list")
    assert(list?first == (3,2))
    assert(list?last == (2,6))
    assert(list?lastIndex == 2)
    assert(list?isEmpty == false)
    assert(list?isNotEmpty == true)

    list = (1,2,3),(4,5,6)
    assert(list?zip[1] == (2,5))

    list = 5,3,2,1,2
    assert(list?sort == (1,2,2,3,5))
    assert(list?sum == 13)
    assert(list?max == 5)
    assert(list?min == 1)
    assert(list?average == 13/list?size) 
    assert(list?dropFirst == (3,2,1,2))
    assert(list?dropLast == (5,3,2,1))
}

// Test dict built-in methods
do {

    dict = { 
        a = 1,2
        b = "hello"
        c = {}
        2 = false
    }

    // printself(dict?toString)
    // printself(dict?toList)
    assert(dict?size == 4)
    assert(dict?keys == (2,"a","b","c"))
    assert(dict?values?first == false)
    assert(dict?is == "dict")
    assert(dict?isEmpty == false)
    assert(dict?isNotEmpty == true)

}

// Test string built-in methods
do {
    string = " hello "
    multiline = "hello
    world"

    assert(string?toString == string)
    assert("23"?toNumber == 23)
    assert(string?toList == (" ","h","e","l","l","o"," "))
    assert(string?size == 7)
    assert("hEllo"?toLowerCase == "hello")
    assert("hello"?toUpperCase == "HELLO")
    assert(string?trim == "hello")
    assert(string?trimEnd == " hello")
    assert(string?trimStart == "hello ")
    assert("hello"?capitalize == "Hello")
    assert(string?is == "string")
    assert(multiline?lines?size == 2)
    assert(string?isEmpty == false)
    assert(string?isNotEmpty == true)
    assert(string?isBlank == false)
    assert(string?isNotBlank == true)
    assert(string?first == " ")
    assert(string?last == " ")
    assert(string?hashCode == 1409378734)
}

// Test number built-in methods
do {
    number = 3.4

    assert(number?toString == "3.4")
    assert(number?toBool == true)
    assert(number?toList == (0,1,2))
    assert(number?trunc == 3)
    assert(number?round == 3)
    assert(number?ceil == 4)
    assert(number?floor == 3)
    assert(number?abs == 3.4)
    assert(number?sign == 1)
    assert(number?cos == -0.9667981925794611)
    assert(number?sin == -0.2555411020268312)
    assert(number?tan == 0.26431690086742515)
    assert(number?cosh == 14.998736658678668)
    assert(number?sinh == 14.965363388718343)
    assert(number?tanh == 0.9977749279342794)
    assert(number?negative == -3.4)
    assert(-3.4?negative == 3.4)
    assert(number?is == "number")
    
    assert(0 <= 10?random <= 10)
    assert(0 <= 6?randomInt <= 6)

    value = 6?randomSign
    assert(value == 6 or value == -6)
}

// Test bool built-in methods
do {

    value = true
    assert(value?toString == "true")
    assert(value?toNumber == 1)
    assert(value?flip == 0)
    assert(value?is == "bool")
}

// Test undefined built-in methods
do {
    value = undefined
    assert(value?toString == "undefined")
    assert(value?is == "undefined")
}

// Test null built-in methods
do {
    value = null
    assert(value?toString == "null")
    assert(value?is == "null")
}

// Test pipe accessors
do {

    x = 0:0.25:10 | map { it?floor, it } | ?group?toList | map { k,v -> v?sum } | ?first
    assert(x == 1.5)
}
